type Error = variant {
  InvalidInput : record { msg : text };
  NotFound : record { msg : text };
};
type Expense = record {
  id : nat64;
  updated_at : opt nat64;
  date : nat64;
  description : text;
  created_at : nat64;
  amount : float64;
};
type ExpensePayload = record {
  date : nat64;
  description : text;
  amount : float64;
};
type Result = variant { Ok : Expense; Err : Error };
service : {
  add_expense : (ExpensePayload) -> (Result);
  calculate_total_expenses : () -> (float64) query;
  delete_expense : (nat64) -> (Result);
  get_expense : (nat64) -> (Result) query;
  get_expenses_above_amount : (float64) -> (vec Expense) query;
  get_expenses_by_date_range : (nat64, nat64) -> (vec Expense) query;
  get_expenses_sorted_by_amount : () -> (vec Expense) query;
  get_paginated_expenses : (nat64, nat64) -> (vec Expense) query;
  update_expense : (nat64, ExpensePayload) -> (Result);
}
